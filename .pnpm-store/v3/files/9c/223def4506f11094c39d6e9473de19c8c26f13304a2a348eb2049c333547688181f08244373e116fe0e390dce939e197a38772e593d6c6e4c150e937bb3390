/**
 * Loose non-null (non-undefined) filter.
 * This method can be used as predicate for Array methods.
 */
declare function isNotNull<T>(value: T | null | undefined): value is T;

declare function isArray<T>(value: any): value is T[];
declare function first<T>(items: T[] | readonly T[]): T;
declare function last<T>(items: T[] | readonly T[], nth?: number): T;
declare function findPrevSibling<T>(items: T[] | readonly T[], item: T): T | undefined;
declare function findNextSibling<T>(items: T[] | readonly T[], item: T): T | undefined;
declare function concat<T>(a: T[] | undefined, b: T[] | undefined): T[];
declare function flatten<T>(array: Array<T | T[]>, depth?: number): T[];

declare function getComponentName(fileName: string): string;
declare function getComponentNameAliases(fileNameOrComponentName: string): string[];

declare function isNumber(value: any): value is number;

declare function getRelativeFileName(importingFileName: string, importedFileName: string): string;

declare function isString(value: any): value is string;
declare const camelize: (str: string) => string;
declare const camelCase: (str: string) => string;
declare const hyphenate: (str: string) => string;
declare const capitalize: (str: string) => string;
declare const uncapitalize: (str: string) => string;
declare const pascalCase: (str: string) => string;
declare const kebabCase: (str: string) => string;
declare function isKebabCase(str: string): boolean;
declare function isPascalCase(str: string): boolean;
declare function isCamelCase(str: string): boolean;

interface Options {
    release: string;
    environment: string;
    tracesSampleRate: number;
}
interface EventDefaults {
    sessionId: string;
    os: string;
    packageName?: string;
    typescriptVersion?: string;
    nodeVersion: string;
    vueVersion?: string;
    [key: string]: string | number | boolean | undefined;
}
declare class Telemetry {
    private readonly defaults;
    private readonly user;
    private isTelemetryEnabled;
    constructor(key: string, options: Options, defaults?: Partial<EventDefaults>);
    private getUserId;
    trace(name: string, description?: string): () => void;
    collect(key: string, value: Record<string, any>): void;
    error(payload: any | Error): void;
    private static _instance?;
    static get instance(): Telemetry;
    static setup(key: string, packageName: string, packageVersion: string, tracesSampleRate: number, defaults: Partial<EventDefaults>): void;
    static extend(defaults: Partial<EventDefaults>): void;
    static optOut(): void;
}
declare function tracePromise<T>(event: string, promise: Promise<T>): Promise<T>;
declare function trace(event: string, description?: string): () => void;
declare function collectError(error: string | Error): void;
declare function collect(key: string, value: Record<string, any>): void;

export { Telemetry, camelCase, camelize, capitalize, collect, collectError, concat, findNextSibling, findPrevSibling, first, flatten, getComponentName, getComponentNameAliases, getRelativeFileName, hyphenate, isArray, isCamelCase, isKebabCase, isNotNull, isNumber, isPascalCase, isString, kebabCase, last, pascalCase, trace, tracePromise, uncapitalize };
